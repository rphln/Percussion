searchNodes=[{"ref":"Percussion.html","title":"Percussion","type":"module","doc":"Provides templates for common patterns among bots."},{"ref":"Percussion.html#__using__/1","title":"Percussion.__using__/1","type":"macro","doc":"When used, applies the specified template."},{"ref":"Percussion.html#command/0","title":"Percussion.command/0","type":"function","doc":""},{"ref":"Percussion.Command.html","title":"Percussion.Command","type":"behaviour","doc":"Specification for command modules."},{"ref":"Percussion.Command.html#c:aliases/0","title":"Percussion.Command.aliases/0","type":"callback","doc":"Returns the list of names that this command should match on. The first element in the list is treated as the command&#39;s primary name."},{"ref":"Percussion.Command.html#c:call/1","title":"Percussion.Command.call/1","type":"callback","doc":"Executes the command on the request."},{"ref":"Percussion.Command.html#c:help/0","title":"Percussion.Command.help/0","type":"callback","doc":"Returns the help message for this command."},{"ref":"Percussion.Command.html#c:usage/0","title":"Percussion.Command.usage/0","type":"callback","doc":"Returns the usage messages for this command."},{"ref":"Percussion.Command.html#t:t/0","title":"Percussion.Command.t/0","type":"type","doc":""},{"ref":"Percussion.Request.html","title":"Percussion.Request","type":"module","doc":"A bot command request."},{"ref":"Percussion.Request.html#and_then/2","title":"Percussion.Request.and_then/2","type":"function","doc":"Maps request by applying a function if it&#39;s not halted, otherwise leave it untouched."},{"ref":"Percussion.Request.html#assign/2","title":"Percussion.Request.assign/2","type":"function","doc":"Assigns multiple values to the request."},{"ref":"Percussion.Request.html#halt/1","title":"Percussion.Request.halt/1","type":"function","doc":"Halts the pipeline, preventing downstream pipes from being executed."},{"ref":"Percussion.Request.html#halt/2","title":"Percussion.Request.halt/2","type":"function","doc":"Halts the pipeline with the given response, preventing downstream pipes from being executed. Equivalent to calling halt/1 and reply/2."},{"ref":"Percussion.Request.html#map/2","title":"Percussion.Request.map/2","type":"function","doc":"Maps request by applying fun on it. If the value returned by fun is a string, the request is halted with the returned string as a response."},{"ref":"Percussion.Request.html#pipe/2","title":"Percussion.Request.pipe/2","type":"function","doc":"Maps request with each element in pipeline in order. See and_then/2. This function terminates when pipeline is exhausted, or if any of its elements halts the request."},{"ref":"Percussion.Request.html#register_after_send/2","title":"Percussion.Request.register_after_send/2","type":"function","doc":"Registers a callback to be invoked after the response is sent. Callbacks are invoked regardless of the request being halted, and are executed in first-in, last-out order."},{"ref":"Percussion.Request.html#reply/2","title":"Percussion.Request.reply/2","type":"function","doc":"Sets the response for the request."},{"ref":"Percussion.Request.html#send_response/2","title":"Percussion.Request.send_response/2","type":"function","doc":"Sends a response to the client using callback."},{"ref":"Percussion.Request.html#t:after_send/0","title":"Percussion.Request.after_send/0","type":"type","doc":"Callbacks to be called right after the response is sent."},{"ref":"Percussion.Request.html#t:arguments/0","title":"Percussion.Request.arguments/0","type":"type","doc":"The list of arguments that were passed into the command."},{"ref":"Percussion.Request.html#t:assigns/0","title":"Percussion.Request.assigns/0","type":"type","doc":"Additional data shared between steps."},{"ref":"Percussion.Request.html#t:halt/0","title":"Percussion.Request.halt/0","type":"type","doc":"Whether to stop propagating this request."},{"ref":"Percussion.Request.html#t:into/0","title":"Percussion.Request.into/0","type":"type","doc":"A value able to be converted into a request or response."},{"ref":"Percussion.Request.html#t:invoked_with/0","title":"Percussion.Request.invoked_with/0","type":"type","doc":"The command name that triggered this request."},{"ref":"Percussion.Request.html#t:message/0","title":"Percussion.Request.message/0","type":"type","doc":"The message which triggered this request."},{"ref":"Percussion.Request.html#t:response/0","title":"Percussion.Request.response/0","type":"type","doc":"The response to send to the user."},{"ref":"Percussion.Request.html#t:step/0","title":"Percussion.Request.step/0","type":"type","doc":"A single step in the pipeline."},{"ref":"Percussion.Request.html#t:t/0","title":"Percussion.Request.t/0","type":"type","doc":""},{"ref":"Percussion.Router.html","title":"Percussion.Router","type":"module","doc":"Command routing specification."},{"ref":"Percussion.Router.html#dispatch/2","title":"Percussion.Router.dispatch/2","type":"function","doc":"Executes the command that matches on request."},{"ref":"Percussion.Router.html#help/2","title":"Percussion.Router.help/2","type":"function","doc":"Returns the help message for the command that matches on name."},{"ref":"Percussion.Router.html#new/1","title":"Percussion.Router.new/1","type":"function","doc":"Builds a routing table for the given modules."},{"ref":"Percussion.Router.html#put/2","title":"Percussion.Router.put/2","type":"function","doc":"Inserts route into the routing table."},{"ref":"Percussion.Router.html#resolve/2","title":"Percussion.Router.resolve/2","type":"function","doc":"Performs a lookup by name on router."},{"ref":"Percussion.Router.html#usage/2","title":"Percussion.Router.usage/2","type":"function","doc":"Returns the usage messages for the command that matches on name."},{"ref":"Percussion.Router.html#t:routes/0","title":"Percussion.Router.routes/0","type":"type","doc":"Routing table."},{"ref":"Percussion.Utils.html","title":"Percussion.Utils","type":"module","doc":"Utility functions that don&#39;t warrant their own modules, but are likely useful for most bots."},{"ref":"Percussion.Utils.html#create_message/1","title":"Percussion.Utils.create_message/1","type":"function","doc":"Replies a request to the respective channel."},{"ref":"Percussion.Utils.html#split/1","title":"Percussion.Utils.split/1","type":"function","doc":"Tries splitting the given text with OptionParser.split/1, and falls back to String.split/1 if it fails. Examples iex&gt; Percussion.Utils.split(~s[choose &quot;lorem ipsum&quot; &quot;hello world&quot;]) [&quot;choose&quot;, &quot;lorem ipsum&quot;, &quot;hello world&quot;] iex&gt; Percussion.Utils.split(~s[I&#39;m a bot]) [&quot;I&#39;m&quot;, &quot;a&quot;, &quot;bot&quot;]"},{"ref":"Percussion.Utils.html#to_request/2","title":"Percussion.Utils.to_request/2","type":"function","doc":"Creates a Percussion.Request.t/0 from a Nostrum.Struct.Message.t/0. Argument contents must be the unprefixed contents of the message that triggered this command. Note that enforcing that message and contents matches is up to the caller."},{"ref":"Percussion.Converters.html","title":"Percussion.Converters","type":"module","doc":"Utility functions for converting Discord mentions or strings into useful formats."},{"ref":"Percussion.Converters.html#animated_emoji_to_id/1","title":"Percussion.Converters.animated_emoji_to_id/1","type":"function","doc":"Converts a formatted Discord animated emoji to a Nostrum.Snowflake.t/0. Examples iex&gt; Percussion.Converters.animated_emoji_to_id(&quot;&lt;a:thonk:123456789&gt;&quot;) {:ok, 123456789} iex&gt; Percussion.Converters.animated_emoji_to_id(&quot;&lt;:thonk:123456789&gt;&quot;) :error iex&gt; Percussion.Converters.animated_emoji_to_id(&quot;&lt;@123456789&gt;&quot;) :error iex&gt; Percussion.Converters.animated_emoji_to_id(&quot;123456789&quot;) :error"},{"ref":"Percussion.Converters.html#channel_to_id/1","title":"Percussion.Converters.channel_to_id/1","type":"function","doc":"Converts a formatted Discord channel mention to a Nostrum.Snowflake.t/0. Examples iex&gt; Percussion.Converters.channel_to_id(&quot;&lt;#123456789&gt;&quot;) {:ok, 123456789} iex&gt; Percussion.Converters.channel_to_id(&quot;&lt;@123456789&gt;&quot;) :error iex&gt; Percussion.Converters.channel_to_id(&quot;123456789&quot;) :error"},{"ref":"Percussion.Converters.html#emoji_to_id/1","title":"Percussion.Converters.emoji_to_id/1","type":"function","doc":"Converts any formatted Discord emoji to a Nostrum.Snowflake.t/0. Examples iex&gt; Percussion.Converters.emoji_to_id(&quot;&lt;a:thonk:123456789&gt;&quot;) {:animated, 123456789} iex&gt; Percussion.Converters.emoji_to_id(&quot;&lt;:thonk:123456789&gt;&quot;) {:static, 123456789} iex&gt; Percussion.Converters.emoji_to_id(&quot;&lt;@123456789&gt;&quot;) :error iex&gt; Percussion.Converters.emoji_to_id(&quot;123456789&quot;) :error"},{"ref":"Percussion.Converters.html#role_mention_to_id/1","title":"Percussion.Converters.role_mention_to_id/1","type":"function","doc":"Converts a formatted Discord role mention to a Nostrum.Snowflake.t/0. Examples iex&gt; Percussion.Converters.role_mention_to_id(&quot;&lt;@&amp;123456789&gt;&quot;) {:ok, 123456789} iex&gt; Percussion.Converters.role_mention_to_id(&quot;&lt;@123456789&gt;&quot;) :error iex&gt; Percussion.Converters.role_mention_to_id(&quot;123456789&quot;) :error"},{"ref":"Percussion.Converters.html#static_emoji_to_id/1","title":"Percussion.Converters.static_emoji_to_id/1","type":"function","doc":"Converts a formatted Discord static emoji to a Nostrum.Snowflake.t/0. Examples iex&gt; Percussion.Converters.static_emoji_to_id(&quot;&lt;:thonk:123456789&gt;&quot;) {:ok, 123456789} iex&gt; Percussion.Converters.static_emoji_to_id(&quot;&lt;@123456789&gt;&quot;) :error iex&gt; Percussion.Converters.static_emoji_to_id(&quot;123456789&quot;) :error"},{"ref":"Percussion.Converters.html#user_mention_to_id/1","title":"Percussion.Converters.user_mention_to_id/1","type":"function","doc":"Converts a formatted Discord user mention to a Nostrum.Snowflake.t/0. Examples iex&gt; Percussion.Converters.user_mention_to_id(&quot;&lt;@123456789&gt;&quot;) {:ok, 123456789} iex&gt; Percussion.Converters.user_mention_to_id(&quot;&lt;@!123456789&gt;&quot;) {:ok, 123456789} iex&gt; Percussion.Converters.user_mention_to_id(&quot;123456789&quot;) :error"},{"ref":"Percussion.Decorators.html","title":"Percussion.Decorators","type":"module","doc":"Built-in command decorators."},{"ref":"Percussion.Decorators.html#direct_message_only/0","title":"Percussion.Decorators.direct_message_only/0","type":"function","doc":"Requires the command to be called in a direct message."},{"ref":"Percussion.Decorators.html#guild_only/0","title":"Percussion.Decorators.guild_only/0","type":"function","doc":"Requires the command to be called in a guild."},{"ref":"Percussion.Decorators.html#log_request/1","title":"Percussion.Decorators.log_request/1","type":"function","doc":"Logs command requests, and how long they took to complete."},{"ref":"Percussion.Decorators.html#measure_response_time/0","title":"Percussion.Decorators.measure_response_time/0","type":"function","doc":"Measures and stores how long a request took. The value is stored in the request&#39;s assigns as response_time."},{"ref":"Percussion.Decorators.html#whitelist_guilds/1","title":"Percussion.Decorators.whitelist_guilds/1","type":"function","doc":"Prevents the command from being called in non-whitelisted guilds. Note that it can still be used in DMs."},{"ref":"Percussion.Decorators.html#whitelist_users/1","title":"Percussion.Decorators.whitelist_users/1","type":"function","doc":"Prevents the command from being called by non-whitelisted users."},{"ref":"Percussion.Decorators.html#whitelisted_guilds_only/1","title":"Percussion.Decorators.whitelisted_guilds_only/1","type":"function","doc":"Combines guild_only/1 and whitelist_guilds/1."},{"ref":"readme.html","title":"🥁 Percussion","type":"extras","doc":"🥁 Percussion Percussion is a command framework for Nostrum. It is based on the concept of transformation pipelines for command requests, being loosely inspired by Plug. The documentation can be found here. If you&#39;re looking for examples, see Katsuragi."},{"ref":"readme.html#about-the-pipeline","title":"🥁 Percussion - About the pipeline.","type":"extras","doc":"Chaining functions is the main way dealing with command requests (i.e., calls) in Percussion. The pipeline is composed of a list of steps that are called in order, which are simply request to request functions: def ping(request) do reply(request, &quot;Pong!&quot;) end Additionally, steps have the ability to stop the whole pipeline prematurely by calling Percussion.Request.halt/1 on the request; this may be used, for example, to handle errors that occur in the middle of the pipeline process."},{"ref":"readme.html#installation","title":"🥁 Percussion - Installation","type":"extras","doc":"At this moment, Percussion is highly volatile; if you&#39;re feeling adventurous and want to try it, simply add it as a GitHub dependency. def deps do [ {:percussion, github: &quot;BlindJoker/Percussion&quot;} ] end"},{"ref":"readme.html#acknowledgements","title":"🥁 Percussion - Acknowledgements","type":"extras","doc":"Percussion borrows some of its code, either verbatim or as inspiration, from the nosedrum library, which is licensed under the ISC license. See their repository for more information."},{"ref":"readme.html#license","title":"🥁 Percussion - License","type":"extras","doc":"This project is licensed under the MIT license."}]